/*
 * Test_HTMLEditorView.java
 */
package test_htmleditor;

import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.GraphicsEnvironment;
import java.awt.Label;
import static java.awt.SystemColor.desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.TaskMonitor;

/**
 * The application's main frame.
 */
public class Test_HTMLEditorView extends FrameView {

    public Test_HTMLEditorView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = Test_HTMLEditorApp.getApplication().getMainFrame();
            aboutBox = new Test_HTMLEditorAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Test_HTMLEditorApp.getApplication().show(aboutBox);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(test_htmleditor.Test_HTMLEditorApp.class).getContext().getResourceMap(Test_HTMLEditorView.class);
        jTextArea2.setText(resourceMap.getString("jTextArea2.text")); // NOI18N
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setName("jTextArea2"); // NOI18N
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea2KeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jTextArea1.getDocument().addDocumentListener(new MyDocListener());
        jTextArea1.getDocument().putProperty("name", "Text Area 1");
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        jEditorPane1.setName("jEditorPane1"); // NOI18N
        jScrollPane4.setViewportView(jEditorPane1);
        jEditorPane1.setEditable(false);
        jEditorPane1.setContentType("text/html");

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );

        // Schaltflächen werden erzeugt und unserer JToolBar hinzugefügt
        JButton ExitButton = new JButton("");
        ImageIcon icon_Ende = new ImageIcon("icons/Ende.png");
        ExitButton.setIcon(icon_Ende);
        ExitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                System.exit(0);
            }
        });;
        JButton BrowserButton = new JButton("");
        ImageIcon icon3 = new ImageIcon("icons/Vorschau.jpg");
        BrowserButton.setIcon(icon3);
        BrowserButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {

                String Datei;

                try {
                    //um Desktop.browse benutzen zu können
                    Desktop desktop = Desktop.getDesktop();
                    //temporäre Datei erstellen, diese ist vom Typ HTML und der Anfang des Namens ist BHD (Initialen des Programmnamens)
                    //TempFiles werden nach Programmende entfernt
                    //TempFile wird erstellt, damit User nicht immer selbst Dateien speichern muss
                    File temp = File.createTempFile("BHD", "." + "html");
                    //nach Programmende Datei löschen
                    temp.deleteOnExit();
                    //Pfad
                    String hilfe = temp.toString();
                    //initialisieren
                    FileWriter fw = null;
                    //Schreiber erstellen
                    try {
                        fw = new FileWriter(temp);
                    } catch (IOException ex) {
                        Logger.getLogger(Test_HTMLEditorView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //auf Schreiben in Datei vorbereiten
                    PrintWriter pw = new PrintWriter(fw);
                    //Inhalt des Area2 schreiben (=HTML-Quellcode)
                    pw.println("" + jTextArea2.getText());
                    //sauber beenden
                    pw.close();
                    Datei = "";
                    //URI als Pfad für den Browser
                    URI uri;
                    //Umwandeln des Backslash \ in den URL-Slash /, Rest des Pfads wird übernommen
                    for (int i = 0; i < hilfe.length(); i++) {
                        if (hilfe.charAt(i) != (char) 92) {
                            Datei = Datei + hilfe.charAt(i);
                        } else {
                            Datei = Datei + "/";
                        }
                    }

                    try {
                        //So öffnen Browser Dateien: "file:///" und Pfad
                        uri = new URI("file:///" + Datei);
                        //temp-File mit Standardbrowser öffnen
                        desktop.browse(uri);
                    } catch (Exception oError) {
                        oError.printStackTrace();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Test_HTMLEditorView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });;
        JButton SpeichernButton = new JButton("");
        ImageIcon icon = new ImageIcon("icons/Speichern.png");
        SpeichernButton.setIcon(icon);
        SpeichernButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                if (letzterOrt == null) {
                    abspeichern();
                } else {
                    String pfad;
                    //alter Ort, altes File
                    pfad = letzterOrt;

                    //HTML-Datei an Zielort erstellen, altes File müsste dabei überschrieben werden
                    File f = new File(pfad);

                    //Schreiberling initialisieren
                    FileWriter fw = null;
                    //Schreiber erstellen
                    try {
                        fw = new FileWriter(f);
                    } catch (IOException ex) {
                        Logger.getLogger(Test_HTMLEditorView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //auf Schreiben in Datei vorbereiten
                    PrintWriter pw = new PrintWriter(fw);
                    //Inhalt des Area2 schreiben
                    pw.println("" + jTextArea2.getText());
                    //sauber beenden
                    pw.close();

                }
            }
        });;
        GraphicsEnvironment ge = GraphicsEnvironment.
        getLocalGraphicsEnvironment();
        String[] fonts = ge.getAvailableFontFamilyNames();
        final JComboBox FontButton = new JComboBox(fonts);
        FontButton.setRenderer(new FontCellRenderer());
        FontButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                speichern(jTextArea2.getText());

                rück = zahl;
                zahl++;

                GraphicsEnvironment ge = GraphicsEnvironment.
                getLocalGraphicsEnvironment();
                String[] fonts = ge.getAvailableFontFamilyNames();
                String Schriftart = fonts[FontButton.getSelectedIndex()];
                String text1 = "<span style=\"font-family:" + Schriftart + "\">";
                String text2 = "</span>";
                String text = einklammern(jTextArea2.getText(), jTextArea1.getText().length(), text1, text2, jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());

                //Ansichten aktualisieren
                jTextArea2.setText(text);
                jEditorPane1.setText(text);
            }
        });;
        String[] größen = new String[70];
        for (int i = 0; i < 70; i++) {
            größen[i] = i + "pt";

        }
        final JComboBox SizeButton = new JComboBox(größen);
        SizeButton.setSelectedIndex(20);
        SizeButton.setRenderer(new FontCellRenderer());
        SizeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                speichern(jTextArea2.getText());

                rück = zahl;
                zahl++;

                String[] größen = new String[70];
                for (int i = 0; i < 70; i++) {
                    größen[i] = i + "pt";

                }
                String größe = größen[SizeButton.getSelectedIndex()];
                String text1 = "<span style=\"font-size:" + größe + "\">";
                String text2 = "</span>";
                String text = einklammern(jTextArea2.getText(), jTextArea1.getText().length(), text1, text2, jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());

                //Ansichten aktualisieren
                jTextArea2.setText(text);
                jEditorPane1.setText(text);
            }
        });;
        JButton FettButton = new JButton("");
        ImageIcon icon_Fett = new ImageIcon("icons/Fett.png");
        FettButton.setIcon(icon_Fett);
        FettButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                String text = einklammern(jTextArea2.getText(), jTextArea1.getText().length(), "<b>", "</b>", jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());

                //Ansichten aktualisieren
                jTextArea2.setText(text);
                jEditorPane1.setText(text);

            }
        });;
        JButton KursivButton = new JButton("");
        ImageIcon icon_Kursiv = new ImageIcon("icons/Kursiv.png");
        KursivButton.setIcon(icon_Kursiv);
        KursivButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                String text = einklammern(jTextArea2.getText(), jTextArea1.getText().length(), "<i>", "</i>", jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());

                //Ansichten aktualisieren
                jTextArea2.setText(text);
                jEditorPane1.setText(text);

            }
        });;
        final JComboBox Ueberschrift= new JComboBox(new String[] { "(keine Aktion)", "Überschrift 1", "Überschrift 2", "Überschrift 3", "Überschrift 4", "Überschrift 5", "Überschrift 6" });
        Ueberschrift.setSelectedIndex(0);

        Ueberschrift.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                //Dieser Button liest den markierten Teil der Area aus und setzt ihn im Area2 in h-Blöcke
                //herausfinden, welche Überschriftengröße denn gewünscht wird
                int h = Ueberschrift.getSelectedIndex();
                //Überschrift wird dann erstellt, wenn nicht "(keine Aktion)" ausgewählt ist und jTextArea2 nicht leer ist
                if (h != 0 && !jTextArea2.getText().equals("")) {
                    //zur Sicherheit in Spezialfällen
                    String hilf3 = jTextArea2.getText() + " ";
                    //Bestücken der Wiederherstellungsfunktion
                    speichern(hilf3);
                    rück = zahl;
                    zahl++;
                    String text1 = "<h" + h + ">";
                    String text2 = "</h" + h + ">";
                    String text = einklammern(jTextArea2.getText(), jTextArea1.getText().length(), text1, text2, jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());

                    //Ansichten aktualisieren
                    jTextArea2.setText(text);
                    jEditorPane1.setText(text);
                }
            }
        });;

        JButton UnterstrichButton = new JButton("");
        ImageIcon icon_Unterstrich = new ImageIcon("icons/Unterstrich.png");
        UnterstrichButton.setIcon(icon_Unterstrich);
        UnterstrichButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                String text = einklammern(jTextArea2.getText(), jTextArea1.getText().length(), "<u>", "</u>", jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());

                //Ansichten aktualisieren
                jTextArea2.setText(text);
                jEditorPane1.setText(text);

            }
        });;
        JButton ÖffnenButton = new JButton("");
        ImageIcon icon_Öffnen = new ImageIcon("icons/Öffnen.png");
        ÖffnenButton.setIcon(icon_Öffnen);
        ÖffnenButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                JFileChooser fc = new JFileChooser();
                fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                fc.setMultiSelectionEnabled(false);
                fc.setCurrentDirectory(new File(System.getProperty("user.home")));  // Setzt das Startverzeichnis
                FileFilter filter = new FileNameExtensionFilter("Webseite", "html");
                fc.setAcceptAllFileFilterUsed(false);
                fc.addChoosableFileFilter(filter);

                if (fc.showDialog(null, "Datei öffnen") == JFileChooser.APPROVE_OPTION) {
                    FileReader fr;
                    BufferedReader br;
                    try {
                        fr = new FileReader(fc.getSelectedFile());
                        br = new BufferedReader(fr);

                        // Textzeilen der Datei einlesen und auf Konsole ausgeben:
                        String zeile;
                        zeile = br.readLine();
                        String alles = "" + zeile;
                        while (zeile != null) {

                            zeile = br.readLine();
                            if (zeile != null) {
                                alles = alles + zeile;
                            }
                        }
                        jTextArea2.setText(alles);
                        jEditorPane1.setText(alles);
                        geöffnet = true;
                        jTextArea1.setText("");
                        boolean text = true;
                        for (int i = 0; i < alles.length(); i++) {
                            geöffnet = true;
                            if (alles.charAt(i) == '<') {
                                text = false;
                            }
                            if (text) {
                                jTextArea1.append("" + alles.charAt(i));

                            }
                            if (alles.charAt(i) == '>') {
                                text = true;
                            }

                        }
                        geöffnet=false;
                        letzterOrt= fc.getSelectedFile().toString();
                        fr.close();
                    } catch (IOException e) {
                        System.out.println("Fehler beim Lesen der Datei " + fc.getSelectedFile().getAbsoluteFile());
                        System.out.println(e.toString());
                    }
                }
            }
        });;
        JButton Neu = new JButton("");
        ImageIcon icon_Neu = new ImageIcon("icons/Neu.png");
        Neu.setIcon(icon_Neu);
        Neu.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                jTextArea1.setText("");
                jTextArea2.setText("");
                jEditorPane1.setText("");
            }
        });;
        JButton RückgängigButton = new JButton("");
        ImageIcon icon_Rückgängig = new ImageIcon("icons/Rückgängig.png");
        RückgängigButton.setIcon(icon_Rückgängig);
        RückgängigButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                // TODO add your handling code here:
                //Bedingung: jTextArea2 ist nicht leer (sonst buggt es am Anfang)
                if (!jTextArea2.getText().equals("")) {
                    //wenn man überhaut etwas rückgängig machen kann
                    if (rück > 0 && !content[rück - 1].equals(jTextArea2.getText())) {
                        rück--;
                    }
                    //Bestücken des Wiederholen-Arrays
                    String[] temp = new String[wieder];
                    for (int i = 0; i < wieder - 1; i++) {
                        temp[i] = Action[i];

                    }
                    //speichern des aktuellen Wertes des jTextArea2 in Array
                    temp[wieder - 1] = jTextArea2.getText();
                    //aktualisieren des Wiederherstellungsarrays
                    Action = temp;
                    //wie beim Speichern des Rückgängig-Arrays
                    Act = wieder;
                    wieder++;
                    //Rücksetzen des jTextArea2's
                    jTextArea2.setText(content[rück]);
                    jEditorPane1.setText(jTextArea2.getText());
                }
            }
        });;
        JButton ResetButton = new JButton("");
        ImageIcon icon_Reset = new ImageIcon("icons/Reset.png");
        ResetButton.setIcon(icon_Reset);
        ResetButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                //einfügen von Präambeln in HTML-Codefenster, leeren von diesem
                String Text = jTextArea1.getText();
                //speichern des Momentanzustandes in Wiederherstellungs-Array
                speichern(jTextArea2.getText());
                //Zahlen der Gesamtzahl und der letzten Einfügung ändern
                rück = zahl;
                zahl++;
                //Area leeren
                jTextArea2.setText("");
                //Präambeln
                jTextArea2.append("<html><head><meta charset='utf8'><style type='text/css'></style></head/><body>");
                //Text und Schlusspräambeln einfügen
                jTextArea2.append(Text);
                jTextArea2.append("</body></html>");
                //aktualisieren der Vorschau
                jEditorPane1.setText(jTextArea2.getText());
                //Rücksetzen des Farbklassenzählers
                k = 0;
            }
        });;
        JButton WiederholenButton = new JButton("");
        ImageIcon icon_Wiederholen = new ImageIcon("icons/Wiederholen.png");
        WiederholenButton.setIcon(icon_Wiederholen);
        WiederholenButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                //Sichern des aktuellen Wertes in Rückgängig-Array
                String hilf3 = jTextArea2.getText() + " ";

                speichern(hilf3);

                rück = zahl;
                zahl++;
                //gegen Bugs
                if (Act > Action.length - 1) {
                    Act = Action.length - 1;
                }
                //wenn man noch etwas rückgängig machen kann
                if (Act > 0 && !Action[Act - 1].equals(jTextArea2.getText())) {
                    Act--;
                }
                //Area zurücksetzen
                jTextArea2.setText(Action[Act]);
                jEditorPane1.setText(jTextArea2.getText());

            }
        });;
        JButton hochgestellt = new JButton("");
        ImageIcon icon_hochgestellt = new ImageIcon("icons/hochgestellt.png");
        hochgestellt.setIcon(icon_hochgestellt);
        hochgestellt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {

                String text = einklammern(jTextArea2.getText(), jTextArea1.getText().length(), "<sup>", "</sup>", jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());

                //Ansichten aktualisieren
                jTextArea2.setText(text);
                jEditorPane1.setText(text);
            }
        });;
        JButton nichtnummeriertButton = new JButton("");
        ImageIcon icon_nichtnummeriertButton = new ImageIcon("icons/nicht_nummeriert.jpg");
        nichtnummeriertButton.setIcon(icon_nichtnummeriertButton);
        nichtnummeriertButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {

                String text=jTextArea2.getText();
                int weiter =0;
                if(!verstanden&&gemacht){
                    weiter =  JOptionPane.showConfirmDialog(null,
                        "Haben Sie das Prinzip verstanden?",
                        "Item hinzufügen",
                        JOptionPane.YES_NO_OPTION);
                    if(weiter==0)
                    verstanden=true;

                }
                if(!gemacht||!verstanden){
                    weiter =  JOptionPane.showConfirmDialog(null,
                        "Haben Sie alle Elemente markiert, die dieser Liste zugeordnet werden sollen?",
                        "Liste (Aufzählung) erstellen",
                        JOptionPane.YES_NO_OPTION);
                    gemacht=true;
                }
                if(weiter == JOptionPane.YES_OPTION){
                    text = einklammern(jTextArea2.getText(), jTextArea1.getText().length(), "<ul>", "</ul>", jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());
                }
                jTextArea2.setText(text);
                jEditorPane1.setText(text);
            }
        });;
        JButton nummeriertButton = new JButton("");
        ImageIcon icon_nummeriertButton = new ImageIcon("icons/nummeriert.jpg");
        nummeriertButton.setIcon(icon_nummeriertButton);
        nummeriertButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {

                String text=jTextArea2.getText();
                int weiter =0;
                if(!verstanden&&gemacht){
                    weiter =  JOptionPane.showConfirmDialog(null,
                        "Haben Sie das Prinzip verstanden?",
                        "Item hinzufügen",
                        JOptionPane.YES_NO_OPTION);
                    if(weiter==0)
                    verstanden=true;

                }
                if(!gemacht||!verstanden){
                    weiter =  JOptionPane.showConfirmDialog(null,
                        "Haben Sie alle Elemente markiert, die dieser Liste zugeordnet werden sollen?",
                        "Liste (Aufzählung) erstellen",
                        JOptionPane.YES_NO_OPTION);
                    gemacht=true;
                }
                if(weiter == JOptionPane.YES_OPTION){
                    text = einklammern(jTextArea2.getText(), jTextArea1.getText().length(), "<ol>", "</ol>", jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());
                }
                jTextArea2.setText(text);
                jEditorPane1.setText(text);
            }
        });;
        JButton ItemButton = new JButton("");
        ImageIcon icon_ItemButton = new ImageIcon("icons/Item.png");
        ItemButton.setIcon(icon_ItemButton);
        ItemButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                String text=jTextArea2.getText();
                int  weiter = 0;
                if(!verstanden&&gemacht){
                    weiter =  JOptionPane.showConfirmDialog(null,
                        "Haben Sie das Prinzip verstanden?",
                        "Item hinzufügen",
                        JOptionPane.YES_NO_OPTION);
                    if(weiter==0)
                    verstanden=true;

                }
                if(!gemacht||!verstanden){
                    weiter =  JOptionPane.showConfirmDialog(null,
                        "Haben Sie bereits eine Liste erstellt?",
                        "Item hinzufügen",
                        JOptionPane.YES_NO_OPTION);
                    gemacht = true;
                }

                if(weiter == JOptionPane.YES_OPTION){
                    text = einklammern(jTextArea2.getText(), jTextArea1.getText().length(), "<li>", "</li>", jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());
                }
                jTextArea2.setText(text);
                jEditorPane1.setText(text);
            }
        });;
        JButton color = new JButton("");
        ImageIcon icon_color = new ImageIcon("icons/color.png");
        color.setIcon(icon_color);
        color.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                // TODO add your handling code here:
                Color ausgewaehlteFarbe = JColorChooser.showDialog(null, "Farbauswahl", null);
                // Farbauswahl mithilfe des J.colorChooser

                String Farbe = ausgewaehlteFarbe.toString();//Farbe (Typ Color) in String umwande
                //String-Builder, um spezielle Vorteile dieses Variablentyps zu nutzen (insert-Einfügen)
                String hilf4 = "";//Hilfs-String zum Anlegen einer Klasse (CSS)
                char[] chars = Farbe.toCharArray();//Farb-STring in Array umwandeln
                String h1 = "";
                int j = 1;//Zähler für 3 Zahligen RGB-Color Code
                k++;//Farbklassenzähler erhöhen

                for (int i = 17; i < Farbe.length(); i++) {
                    //Schleife zum Auslesen der Farbwerte aus dem RGB-Code
                    if (chars[i] == ',' || chars[i] == ']') {
                        i = i + 2;
                        hilf4 = hilf4 + h1;
                        if (j <= 2) {
                            hilf4 = hilf4 + ",";
                        }
                        j++;
                        h1 = "";
                    } else {
                        h1 = h1 + chars[i];

                    }

                }
                String text1 = "<a style='color:rgb(" + hilf4 + ")'>";//Starttag
                String text2 = "</a>";//Endtag

                String ausgabe = einklammern(jTextArea2.getText(), jTextArea1.getText().length(),text1 ,text2 , jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());

                jTextArea2.setText(ausgabe);//Einfügen des HTML-Codes in das jTextArea2
                jEditorPane1.setText(jTextArea2.getText());

            }
        });;
        JButton tabelle = new JButton("");
        ImageIcon icon_tabelle = new ImageIcon("icons/tabel.png");
        tabelle.setIcon(icon_tabelle);
        tabelle.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                JTextField zeilen = new JTextField();
                JTextField spalten = new JTextField();
                Object[] message = {"Anzahl der Zeilen", zeilen,
                    "Anzahl der Spalten", spalten};

                JOptionPane pane = new JOptionPane( message,
                    JOptionPane.PLAIN_MESSAGE,
                    JOptionPane.OK_CANCEL_OPTION);
                pane.createDialog(null, "Tabellen").setVisible(true);
                int zeilen1= Integer.parseInt(zeilen.getText());
                int spalten1= Integer.parseInt(spalten.getText());
                String neu="";
                neu = neu + "<table border='1'>";
                for (int i=1;i<=zeilen1;i++){
                    neu= neu + "<tr>";
                    for(int j=1;j<=spalten1;j++){
                        if(i==1){neu = neu + "<th>" + "<b>";}
                        else{neu=neu+"<td>";}

                        JTextField text = new JTextField();
                        Object[] message1 = {"Zeile " + i + "\n" +"Spalte " + j, text};
                        JOptionPane pane1 = new JOptionPane( message1,
                            JOptionPane.PLAIN_MESSAGE,
                            JOptionPane.OK_CANCEL_OPTION);
                        pane1.createDialog(null, "Texteingabe").setVisible(true);
                        String area=text.getText();
                        if(i==1){neu = neu + area +"</b>"+"</th>";}
                        else{neu=neu + area + "</td>";}

                        //System.out.println(neu);
                    }
                    neu = neu + "</tr>";
                    //System.out.println(neu);
                }
                neu = neu + "</table>";
                String Text=einfueg(jTextArea2.getText(), jTextArea1.getText().length(), neu, jTextArea1.getCaretPosition());
                jTextArea2.setText(Text);
                jEditorPane1.setText(Text);

            }
        });;
        jToolBar1.add(Neu);
        jToolBar1.add(ÖffnenButton);
        jToolBar1.add(SpeichernButton);
        jToolBar1.add(BrowserButton);
        jToolBar1.add(RückgängigButton);
        jToolBar1.add(ResetButton);
        jToolBar1.add(WiederholenButton);
        jToolBar1.add(Ueberschrift);
        jToolBar1.add(FontButton);
        jToolBar1.add(SizeButton);
        jToolBar1.add(FettButton);
        jToolBar1.add(KursivButton);
        jToolBar1.add(UnterstrichButton);
        jToolBar1.add(hochgestellt);
        jToolBar1.add(nichtnummeriertButton);
        jToolBar1.add(ItemButton);
        jToolBar1.add(nummeriertButton);
        jToolBar1.add(color);
        jToolBar1.add(tabelle);
        jToolBar1.add(ExitButton);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(test_htmleditor.Test_HTMLEditorApp.class).getContext().getActionMap(Test_HTMLEditorView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        menuBar.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N

        jMenuItem8.setText(resourceMap.getString("jMenuItem8.text")); // NOI18N
        jMenuItem8.setName("jMenuItem8"); // NOI18N
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText(resourceMap.getString("jMenuItem9.text")); // NOI18N
        jMenuItem9.setName("jMenuItem9"); // NOI18N
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem10.setText(resourceMap.getString("jMenuItem10.text")); // NOI18N
        jMenuItem10.setName("jMenuItem10"); // NOI18N
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuItem7.setText(resourceMap.getString("jMenuItem7.text")); // NOI18N
        jMenuItem7.setName("jMenuItem7"); // NOI18N
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        menuBar.add(jMenu2);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addGap(129, 129, 129)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusAnimationLabel)
                        .addContainerGap())))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    //Wiederherstellungs-Array
    static String[] content = new String[1];
    //Zähler
    static int zahl = 1;
    static int rück = 0;
    //Wiederholungs-Array und 2 Zähler
    static String[] Action = new String[1];
    static int Act = 0, wieder = 1;

    /**
     * Hauptmethode zum Einfügen von HTML-Befehlen
     *
     * @param code - aktueller HTML-Code aus jTextArea2
     * @param laenge - Zeichenlänge des Textes in jTextArea1
     * @param text1 - Starttag
     * @param text2 - Endtag
     * @param anfang - Anfangsposition der Markierung
     * @param ende - Endposition der Markierung
     * @return Zusammengefügter, neuer HTML Code
     */
    public String einklammern(String code, int laenge, String text1, String text2, int anfang, int ende) {

        //Definition nötiger Variablen
        String Text = "";

        Text = "";
        int nu = 0;
        //Flaggen-Prinzip
        boolean gefunden = false;
        //Sonderfälle müssen beachtet werden
        //Sonderfall: Überschrift von Anfang an
        if (anfang == 0) {
            nu--;
            anfang++;
        }
        //Schleife sucht den Anfang der Markierung im HTML-Code
        for (int i = nu; i < anfang; i++) {
            //um Bugs zu vermeiden
            if (i < 0) {
                i++;
            }
            //Wert, den am Ende das Area erhält: alter Code bis zum Anfang der Überschrift, 
            //dann Überschrift, dann Rest des alten Codes
            Text = Text + code.charAt(i);
            //wesentliches Element des Codes
            //HTML-tags beginnen immer mit einem '<', also liegt ein tag vor, wenn ein '<' gelesen wird
            if (code.charAt(i) == '<') {
                //wie gesagt- Flaggenprinzip
                gefunden = true;
            }

            //tags kommen nur im HTML-Code vor, also ist dieser länger und die Marken verschieben sich
            if (gefunden) {
                anfang++;
                ende++;
                laenge++;
            }
            //tags werden immer durch ein '>' beendet
            if (code.charAt(i) == '>') {
                gefunden = false;

            }
            //Wiederholung bis zum Erreichen des Anfangs der Überschrift

        }
        //sichern des Wertes von temporär
        String temporär = Text;
        //anfang ist bei diesem Prinzip immer um 1 zu groß
        anfang--;
        Text = "";
        //alle Zeichen bis auf letztes übernehmen
        for (int i = 0; i < anfang; i++) {
            Text = Text + temporär.charAt(i);
        }
        //hinzufügen des Starttags
        Text = Text + text1;
        //gleiches Prinzip wie oben, übernimmt den Text inklusive anderer tags wie Zeilenumbrüchen bis Endtag
        gefunden = false;
        for (int i = anfang; i < ende; i++) {
            Text = Text + code.charAt(i);
            if (code.charAt(i) == '<') {

                gefunden = true;
            }
            if (gefunden) {
                ende++;
                laenge++;
            }
            if (code.charAt(i) == '>') {
                gefunden = false;

            }
        }
        //Endtag
        Text = Text + text2;
        //übernimmt Code bis zum Ende
        gefunden = false;
        String helper = code + "      ";
        for (int i = ende; i < laenge; i++) {
            Text = Text + code.charAt(i);
            if (helper.charAt(i) == '<') {
                gefunden = true;
            }
            if (gefunden) {
                laenge++;
            }
            if (helper.charAt(i) == '>') {
                gefunden = false;

            }
        }
        //HTML Code bis zu Ende zusammenfügen
        for (int i = laenge; i < code.length(); i++) {
            Text = Text + code.charAt(i);
        }
        return Text;

    }

    /**
     * Funktion zum Einfügen von HTML-Befehlen an die Curser-Position
     *
     * @param code - aktueller HTML-Code aus jTextArea2
     * @param laenge - Länge des Textes aus jTextArea1
     * @param text1 - HTML-Tag
     * @param anfang - Curserposition im jTextArea1
     * @return
     */
    public String einfueg(String code, int laenge, String text1, int anfang) {
        int ende;
        if (anfang != jTextArea1.getText().length()) {
            ende = anfang + 1;
        } else {
            ende = anfang;

        }

        String Text = "";

        Text = "";
        int nu = 0;
        boolean gefunden = false;
        if (anfang == 0) {
            nu--;
            anfang++;
        }
        for (int i = nu; i < anfang + 1; i++) {
            if (i < 0) {
                i++;
            }
            Text = Text + jTextArea2.getText().charAt(i);
            if (jTextArea2.getText().charAt(i) == '<') {

                gefunden = true;
            }
            if (gefunden) {
                anfang++;
                ende++;
                laenge++;
            }
            if (jTextArea2.getText().charAt(i) == '>') {
                gefunden = false;

            }

        }

        String temporär = Text;
        anfang--;
        Text = "";
        for (int i = 0; i < anfang + 1; i++) {
            Text = Text + temporär.charAt(i);
        }

        Text = Text + text1;

        gefunden = false;
        String helper = jTextArea2.getText() + "      ";
        for (int i = ende - 1; i < laenge + 1; i++) {
            Text = Text + helper.charAt(i);
            if (helper.charAt(i) == '<') {
                gefunden = true;
            }
            if (gefunden) {
                laenge++;

            }
            if (helper.charAt(i) == '>') {
                gefunden = false;

            }
        }
        temporär = Text;
        Text = "";
        for (int i = 0; i < temporär.length() - 1; i++) {
            Text = Text + temporär.charAt(i);
        }
        return Text;

    }

    static int k = 0; // Zählvariable für Farbklassendefinition, hier etwas unsinnig platziert, aber das ist Java ja egal

    /**
     * Der speichern-Befehl
     *
     * @param evt wenn auf das MenuItem "Speichern" geklickt wird, wird aktuelle
     * Datei durch noch aktuellere ersetzt
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        //vorher muss gezielt gespeichert werden
        if (letzterOrt == null) {
            abspeichern();
        } else {
            String pfad;
            //alter Ort, altes File
            pfad = letzterOrt;

            //HTML-Datei an Zielort erstellen, altes File müsste dabei überschrieben werden
            File f = new File(pfad);

            //Schreiberling initialisieren
            FileWriter fw = null;
            //Schreiber erstellen
            try {
                fw = new FileWriter(f);
            } catch (IOException ex) {
                Logger.getLogger(Test_HTMLEditorView.class.getName()).log(Level.SEVERE, null, ex);
            }
            //auf Schreiben in Datei vorbereiten
            PrintWriter pw = new PrintWriter(fw);
            //Inhalt des Area2 schreiben
            pw.println("" + jTextArea2.getText());
            //sauber beenden
            pw.close();

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    static String letzterOrt = null;

    /**
     * Der Speichern unter- Menüeintrag
     *
     * @param evt wenn im Menü angeklickt
     */
    private void abspeichern() {
        //hier speichert das Programm die Ausgabe als html-Datei
        // JFileChooser-Objekt erstellen
        //JFileChooser chooser = new JFileChooser();
        // Dialog zum Oeffnen von Dateien anzeigen
        //int ort=chooser.showSaveDialog(null);
        String pfad;
        //Benutzerverzeichnis
        pfad = System.getProperty("user.home");
        //Speichern unter-Fenster
        JFileChooser chooser;
        //wird mit Userverzeichnis gestartet
        chooser = new JFileChooser(pfad);
        //ist ein Speichern-Dialog
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        //Nur HTML-Dateien
        FileNameExtensionFilter html = new FileNameExtensionFilter(
                "Website: html", "html");
        chooser.removeChoosableFileFilter(chooser.getAcceptAllFileFilter());

        chooser.setFileFilter(html);
        //Titel
        chooser.setDialogTitle("Website speichern unter...");
        chooser.setVisible(true);
        //Anzeigen ohne Parameter und überprüfen
        int result = chooser.showSaveDialog(null);

        //Wenn Klick auf speichern,
        if (result == JFileChooser.APPROVE_OPTION) //dann wird speicherort ermittelt
        {
            pfad = chooser.getSelectedFile().toString();

            //HTML-Datei an Zielort erstellen
            File f = new File(pfad + ".html");
            letzterOrt = pfad + ".html";
            //Schreiberling initialisieren
            FileWriter fw = null;
            //Schreiber erstellen
            try {
                fw = new FileWriter(f);
            } catch (IOException ex) {
                Logger.getLogger(Test_HTMLEditorView.class.getName()).log(Level.SEVERE, null, ex);
            }
            //auf Schreiben in Datei vorbereiten
            PrintWriter pw = new PrintWriter(fw);
            //Inhalt des Area2 schreiben
            pw.println("" + jTextArea2.getText());
            //sauber beenden
            pw.close();

        }
    }
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        abspeichern();

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
         // TODO add your handling code here:
        Color ausgewaehlteFarbe = JColorChooser.showDialog(null, "Farbauswahl", null);
        // Farbauswahl mithilfe des J.colorChooser

        String Farbe = ausgewaehlteFarbe.toString();//Farbe (Typ Color) in String umwande
        //String-Builder, um spezielle Vorteile dieses Variablentyps zu nutzen (insert-Einfügen)
        String hilf4 = "";//Hilfs-String zum Anlegen einer Klasse (CSS)
        char[] chars = Farbe.toCharArray();//Farb-STring in Array umwandeln
        String h1 = "";
        int j = 1;//Zähler für 3 Zahligen RGB-Color Code
        k++;//Farbklassenzähler erhöhen

        for (int i = 17; i < Farbe.length(); i++) {
            //Schleife zum Auslesen der Farbwerte aus dem RGB-Code
            if (chars[i] == ',' || chars[i] == ']') {
                i = i + 2;
                hilf4 = hilf4 + h1;
                if (j <= 2) {
                    hilf4 = hilf4 + ",";
                }
                j++;
                h1 = "";
            } else {
                h1 = h1 + chars[i];

            }

        }
        String text1 = "<a style='color:rgb(" + hilf4 + ")'>";//Starttag
        String text2 = "</a>";//Endtag
        
        String ausgabe = einklammern(jTextArea2.getText(), jTextArea1.getText().length(),text1 ,text2 , jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());
        
        jTextArea2.setText(ausgabe);//Einfügen des HTML-Codes in das jTextArea2
        jEditorPane1.setText(jTextArea2.getText());
        jEditorPane1.setEditable(false);
    }
    //Fehler in NetBeans

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "JPG,PNG & GIF Bilder", "jpg", "gif", "png");
        chooser.setFileFilter(filter);
        Component parent = null;

        int returnVal = chooser.showOpenDialog(parent);
        File file = chooser.getCurrentDirectory();
        String location = file.toString() + "/" + chooser.getSelectedFile().getName();
        System.out.println(location);
        // TODO add your handling code here: String hilf3 = jTextArea2.getText() + " ";

        speichern(jTextArea2.getText());

        rück = zahl;
        zahl++;
        int currentCaretPosition = jTextArea1.getCaretPosition();

        //Dieser Button liest den markierten teil der Area aus und gibt ihn in die Konsole zurück
        //jTextArea.getSelectedText() liest markierten Teil aus
        int länge = jTextArea1.getText().length();
        String text1 = "<img src='" + location + "' alt='Grafik' >";
        //String code, int laenge, String text1, int anfang
        String End = einfueg(jTextArea2.getText(), jTextArea1.getText().length(), text1, jTextArea1.getCaretPosition());
        //jTextArea.getSelectionStart() und -End() lesen Anfang und Ende der Markierung aus
        jTextArea2.setText(End);
        jEditorPane1.setText(End);

    }//GEN-LAST:event_jMenuItem8ActionPerformed
    /**
     * der Menüeintrag für embedded Video
     *
     * @param evt bei Klick
     */
    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        //bestücken der Rückgängig- Funktion
        speichern(jTextArea2.getText());

        rück = zahl;
        zahl++;
        //Cursorposition auslesen
        int currentCaretPosition = jTextArea1.getCaretPosition();

        int länge = jTextArea1.getText().length();
        int anfang = currentCaretPosition;
        int ende;
        //ende 1 höher als anfang, wenn möglich
        if (currentCaretPosition != jTextArea1.getText().length()) {
            ende = currentCaretPosition + 1;
        } else {
            ende = anfang;

        }
        //Variablen
        String Text = "";
        int nu = 0;
        boolean gefunden = false;
        String temporär;
        Text = "";
        //ab hier wie bei Überschriften
        if (anfang == 0) {
            nu--;
            anfang++;
        }
        if (currentCaretPosition == jTextArea1.getText().length()) {
            anfang--;
        }
        for (int i = nu; i < anfang + 1; i++) {
            if (i < 0) {
                i++;
            }
            Text = Text + jTextArea2.getText().charAt(i);
            if (jTextArea2.getText().charAt(i) == '<') {

                gefunden = true;
            }
            if (gefunden) {
                anfang++;
                ende++;
                länge++;
            }
            if (jTextArea2.getText().charAt(i) == '>') {
                gefunden = false;

            }

        }

        temporär = Text;
        if (currentCaretPosition == jTextArea1.getText().length()) {
            anfang++;
            ende++;
        }
        if (currentCaretPosition == 0) {
            anfang--;
        }
        Text = "";
        for (int i = 0; i < anfang; i++) {
            Text = Text + temporär.charAt(i);
        }
        //User muss Quellcode für das Einbinden von Quellseite kopieren (können wir nicht allgemein ermitteln)
        String eingabe = JOptionPane.showInputDialog(null, "Wenn die Quellseite das Einbinden des Videos erlaubt, muss es eine Embedded- Funktion auf dieser geben. Bitte fügen Sie hier den erzeugten Sourcecode ein.",
                "Videodatei einbinden",
                JOptionPane.PLAIN_MESSAGE);
        if (eingabe != null) {
            String vid = eingabe;
            Text = Text + vid;
            //Rest wie oben bei Überschriften
        }
        gefunden = false;
        String helper = jTextArea2.getText() + "      ";
        for (int i = ende - 1; i < länge + 1; i++) {
            Text = Text + helper.charAt(i);
            if (helper.charAt(i) == '<') {
                gefunden = true;
            }
            if (gefunden) {
                länge++;

            }
            if (helper.charAt(i) == '>') {
                gefunden = false;

            }
        }
        temporär = Text;
        Text = "";
        for (int i = 0; i < temporär.length() - 1; i++) {
            Text = Text + temporär.charAt(i);
        }
        //System.out.println(anfang + "Hallo" + hilf.charAt(anfang));
        jTextArea2.setText(Text);
        jEditorPane1.setText(Text);

    }//GEN-LAST:event_jMenuItem9ActionPerformed
    /**
     * der Knopf für Video aus Datei
     *
     * @param evt bei Klick
     */
    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        //im Prinzip wie oben
        speichern(jTextArea2.getText());

        rück = zahl;
        zahl++;
        int currentCaretPosition = jTextArea1.getCaretPosition();

        int länge = jTextArea1.getText().length();
        //jTextArea.getSelectionStart() und -End() lesen Anfang und Ende der Markierung aus
        int anfang = currentCaretPosition;
        int ende;
        if (currentCaretPosition != jTextArea1.getText().length()) {
            ende = currentCaretPosition + 1;
        } else {
            ende = anfang;

        }
        String Text = "";
        int nu = 0;
        boolean gefunden = false;
        String temporär;
        Text = "";

        if (anfang == 0) {
            nu--;
            anfang++;
        }
        if (currentCaretPosition == jTextArea1.getText().length()) {
            anfang--;
        }
        for (int i = nu; i < anfang + 1; i++) {
            if (i < 0) {
                i++;
            }
            Text = Text + jTextArea2.getText().charAt(i);
            if (jTextArea2.getText().charAt(i) == '<') {

                gefunden = true;
            }
            if (gefunden) {
                anfang++;
                ende++;
                länge++;
            }
            if (jTextArea2.getText().charAt(i) == '>') {
                gefunden = false;

            }

        }

        temporär = Text;
        if (currentCaretPosition == jTextArea1.getText().length()) {
            anfang++;
            ende++;
        }
        if (currentCaretPosition == 0) {
            anfang--;
        }
        Text = "";
        for (int i = 0; i < anfang; i++) {
            Text = Text + temporär.charAt(i);
        }
        //um Verwendbarkeit auf Server sicherzustellen, wird kein Pfad verwendet, sonder angenommen, die Datei ist im selben Ordner oder einem Unterordner davon
        String eingabe = JOptionPane.showInputDialog(null, "Video muss im gleichen Ordner wie die HTML-Datei gespeichert werden. Hier bitte Name der Datei mit Dateiendung eingeben.",
                "Videodatei einbinden",
                JOptionPane.PLAIN_MESSAGE);
        //poster='video-standbild.jpg' merken wir uns mal
        String vid;
        if (eingabe != null) {
            //HTML-5-Befehl zur Darstellung eines Videos mit irgendwelchen Werten
            vid = "<video src='" + eingabe + "' width='400' height='300'  autobuffer autoplay controls>";
        } else {
            vid = "";
        }
        Text = Text + vid;

        gefunden = false;
        String helper = jTextArea2.getText() + "      ";
        for (int i = ende - 1; i < länge + 1; i++) {
            Text = Text + helper.charAt(i);
            if (helper.charAt(i) == '<') {
                gefunden = true;
            }
            if (gefunden) {
                länge++;

            }
            if (helper.charAt(i) == '>') {
                gefunden = false;

            }
        }
        temporär = Text;
        Text = "";
        for (int i = 0; i < temporär.length() - 1; i++) {
            Text = Text + temporär.charAt(i);
        }
        jTextArea2.setText(Text);
        jEditorPane1.setText(Text);


    }//GEN-LAST:event_jMenuItem10ActionPerformed

    /**
     * Link einfügen
     *
     * @param evt
     */
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        int currentCaretPosition = jTextArea1.getCaretPosition();
        JTextField anzeige = new JTextField();
        JTextField adresse = new JTextField();
        Object[] message = {"Anzuzeigender Text:", anzeige,
            "Webadresse:", adresse};
        adresse.setText("http://");
        JOptionPane pane = new JOptionPane(message,
                JOptionPane.PLAIN_MESSAGE,
                JOptionPane.OK_CANCEL_OPTION);
        pane.createDialog(null, "Link einfügen").setVisible(true);
        String Paste = null;
        String Link = adresse.getText(), Ansicht = anzeige.getText();

        while (!urlExists(Link)) {
            Link = JOptionPane.showInputDialog(null, "Bitte geben Sie eine korrekte Adresse ein. Bitte achten Sie auf http:// und www.",
                    "Link nicht verfügbar",
                    JOptionPane.PLAIN_MESSAGE);
        }

        Paste = " <a href='" + Link + "'>" + Ansicht + "</a> ";

        speichern(jTextArea2.getText());

        rück = zahl;
        zahl++;

        //Dieser Button liest den markierten teil der Area aus und gibt ihn in die Konsole zurück
        //jTextArea.getSelectedText() liest markierten Teil aus
        int länge = jTextArea1.getText().length();
        String hilf = jTextArea1.getSelectedText(), hilf2 = "";
        //jTextArea.getSelectionStart() und -End() lesen Anfang und Ende der Markierung aus
        int anfang = currentCaretPosition;
        int ende;
        if (currentCaretPosition != jTextArea1.getText().length()) {
            ende = currentCaretPosition + 1;
        } else {
            ende = anfang;

        }
        String Text = "";
        int nu = 0;
        boolean gefunden = false;
        String temporär;

        //Ausgabe diverser Werte in Konsole
        Text = "";

        if (anfang == 0) {
            nu--;
            anfang++;
        }
        if (currentCaretPosition == jTextArea1.getText().length()) {
            anfang--;
        }
        for (int i = nu; i < anfang + 1; i++) {
            if (i < 0) {
                i++;
            }
            Text = Text + jTextArea2.getText().charAt(i);
            if (jTextArea2.getText().charAt(i) == '<') {

                gefunden = true;
            }
            if (gefunden) {
                anfang++;
                ende++;
                länge++;
            }
            if (jTextArea2.getText().charAt(i) == '>') {
                gefunden = false;

            }

        }

        temporär = Text;
        if (currentCaretPosition == jTextArea1.getText().length()) {
            anfang++;
            ende++;
        }
        if (currentCaretPosition == 0) {
            anfang--;
        }
        Text = "";
        for (int i = 0; i < anfang; i++) {
            Text = Text + temporär.charAt(i);
        }

        Text = Text + Paste;
        gefunden = false;
        String helper = jTextArea2.getText() + "    ";
        for (int i = ende - 1; i < länge + 1; i++) {
            Text = Text + helper.charAt(i);
            if (helper.charAt(i) == '<') {
                gefunden = true;
            }
            if (gefunden) {
                länge++;

            }
            if (helper.charAt(i) == '>') {
                gefunden = false;

            }
        }
        temporär = Text;
        Text = "";
        for (int i = 0; i < temporär.length() - 1; i++) {
            Text = Text + temporär.charAt(i);
        }
        final String Ausgabe = Text;
        jTextArea2.setText(Ausgabe);
        jEditorPane1.setText(Ausgabe);
        jTextArea1.insert(" " + anzeige.getText() + " ", currentCaretPosition);


    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jTextArea2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyTyped
        // TODO add your handling code here:
        jEditorPane1.setText(jTextArea2.getText());
    }//GEN-LAST:event_jTextArea2KeyTyped
static boolean gemacht=false;
static boolean verstanden = false;    static boolean geöffnet = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;

    /**
     * Speichert aktuellen Vorgang im Wiederherstellungs-Array content
     *
     * @param hilf3, content(static String[]), zahl (static int)
     * @return content(static String[]), zahl (static int) zur weiteren Nutzung
     */
    private void speichern(String hilf3) {
        String[] temp = new String[zahl];
        for (int i = 0; i < zahl - 1; i++) {
            temp[i] = content[i];

        }

        temp[zahl - 1] = hilf3;
        content = temp;

    }
    static boolean zwangsumbruch = false;
    static int hier = -1;
    //ActionListeners für Eingabe, Löschen und Formatierungen

    private class MyDocListener implements DocumentListener {

        /**
         * gibt an, was passiert, wenn ein Buchstabe in das Area1 getippt wird
         *
         * @param e Dokument des jTextArea1 für ActionListener
         */
        public void insertUpdate(DocumentEvent e) {
            //Sonderfall: erster Buchstabe
            if (geöffnet) {
                geöffnet = false;
            } else {
                if (jTextArea1.getText().length() == 1) {
                    jTextArea2.setText("<html><head><meta charset='utf8'><style type='text/css'></style></head/><body>" + jTextArea1.getText().charAt(0) + "</body></html>");
                    jEditorPane1.setText(jTextArea2.getText());
                } else {
                    //herausfinden, wo eingetippt wurde
                    int pos = e.getOffset() - 1;
                    boolean umbruch = false;
                    //zur Sicherheit
                    if (!jTextArea2.getText().equals("")) {
                        //bei Zeilenumbruch, funktioniert aber nicht richtig
                        if (pos < jTextArea1.getText().length() - 1) {
                            if (jTextArea1.getText().charAt(pos + 1) == (char) 10) {
                                umbruch = true;
                            }
                        } else if (jTextArea1.getText().charAt(pos) == (char) 10) {
                            umbruch = true;
                        }
                        //gutes altes Flaggenprinzip
                        boolean gefunden = false;
                        if (pos == -1) {
                            pos++;
                        }
                        for (int i = -1; i <= pos; i++) {
                            if (i == -1) {
                                i++;
                            }

                            if (jTextArea2.getText().charAt(i) == '<') {
                                
                                gefunden = true;
                            }
                            if (gefunden) {
                                pos++;
                            }
                            if (jTextArea2.getText().charAt(i) == '>') {
                                gefunden = false;
                                
                            }
                        }
                        
                        //HTML-Umbruch durch <br>
                        if (umbruch) {
                            jTextArea2.insert("<br> ", pos + 1);
                            zwangsumbruch = true;
                            hier = pos - 1;
                        } //sonst nur den eingegebenen Buchstaben einfügen
                        else {
                            jTextArea2.insert(jTextArea1.getText().charAt(e.getOffset()) + "", pos + 1);
                        }
                        
                        //anzeigen
                        jEditorPane1.setText(jTextArea2.getText());
                    }
                }
            }
        }

        /**
         * was passiert, wenn ein Buchstabe entfernt wird
         *
         * @param e Dokument des jTextArea1 für ActionListener
         */
        public void removeUpdate(DocumentEvent e) {
            //Flaggenprinzip
            boolean funktionieregefälligst = false;
            int pos = e.getOffset();
            if (pos <= 0) {
                pos++;
                funktionieregefälligst = true;
            }
            //überprüfen ob Zeilenumbruch zu löschen ist
            boolean umbruch = false;
            if (!jTextArea2.getText().equals("")) {
                if (pos > 1) {
                    if (jTextArea1.getText().charAt(pos - 1) == (char) 10) {
                        umbruch = true;
                    }
                }
                //Suchen der Position
                boolean gefunden = false;
                for (int i = 0; i < pos; i++) {
                    if (jTextArea2.getText().charAt(i) == '<') {

                        gefunden = true;
                    }
                    if (gefunden) {
                        pos++;
                    }
                    if (jTextArea2.getText().charAt(i) == '>') {
                        gefunden = false;

                    }
                }
                //Sonderfall: erster Buchstabe
                if (pos > 0) {
                    if (funktionieregefälligst) {
                        pos--;
                    }
                }
                String hilf = jTextArea2.getText();
                String rück = "";
                //alles außer Umbruch übernehmen
                if (umbruch) {
                    for (int i = 0; i < pos + 1; i++) {
                        rück = rück + hilf.charAt(i);
                    }
                    for (int i = pos + 5; i < hilf.length(); i++) {
                        rück = rück + hilf.charAt(i);

                    }
                    //sonst alles übernehmen außer gelöschtem Buchstaben
                } else {
                    for (int i = 0; i < pos; i++) {
                        rück = rück + hilf.charAt(i);

                    }
                    for (int i = pos + 1; i < hilf.length(); i++) {
                        rück = rück + hilf.charAt(i);

                    }
                }
                //anzeigen
                jTextArea2.setText("" + rück);
                jEditorPane1.setText(jTextArea2.getText());

            }

        }

        /**
         * ein Void, der nie ausgeführt wird
         *
         * @param e das Document des jTextArea1
         */
        public void changedUpdate(DocumentEvent e) {
            //wird niemals auslösen, ich vernachlässige das hier (nur bei StyledDocuments, aber das Area ist ein PlainDocument)
            //falls er doch eintritt
            //um den Mist rückgängig machen zu können
            speichern(jTextArea2.getText());

            rück = zahl;
            zahl++;
            //Fehlermeldung ausgeben
            JOptionPane.showMessageDialog(null, "Dieser Fall hätte nicht auftreten dürfen.", "Es tut uns leid.", JOptionPane.WARNING_MESSAGE);
        }
    };

    public static boolean urlExists(String urlString) {
        InputStream is = null;
        try {
            URL url = new URL(urlString);
            URLConnection con = url.openConnection();

            is = con.getInputStream();
            return true;
        } catch (IOException e) {
            return false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                }
            }
        }

    }
}
